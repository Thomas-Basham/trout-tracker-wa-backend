AWSTemplateFormatVersion: "2010-09-09"
Description: Troutlytics Full Backend Stack; Aurora, API (Lambda), Scraper (Fargate)

Parameters:
  ECRImageUriScraper:
    Type: String
    Description: ECR image URI for the web scraper
  ECRImageUriAPI:
    Type: String
    Description: ECR image URI for the Lambda-based API
  VpcId:
    Type: AWS::EC2::VPC::Id
  SubnetIds:
    Type: List<AWS::EC2::Subnet::Id>
  SecurityGroupId:
    Type: AWS::EC2::SecurityGroup::Id

Resources:
  ### üöÄ Aurora Serverless DB
  TroutlyticsDBCluster:
    Type: AWS::RDS::DBCluster
    Properties:
      Engine: aurora-postgresql
      EngineMode: serverless
      DBClusterIdentifier: troutlytics-db
      MasterUsername: masteruser
      MasterUserPassword: masterpass1234 # Use SecretsManager in production
      EnableHttpEndpoint: true
      DBSubnetGroupName: !Ref DBSubnetGroup
      VpcSecurityGroupIds:
        - !Ref SecurityGroupId

  DBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for Aurora
      SubnetIds: !Ref SubnetIds
      DBSubnetGroupName: troutlytics-db-subnet-group

  ### üîê Secrets Manager for DB
  DBSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: troutlytics-db
      SecretString: !Sub |
        {
          "username": "masteruser",
          "password": "masterpass1234",
          "host": "${TroutlyticsDBCluster.Endpoint.Address}",
          "port": "5432",
          "dbname": "postgres"
        }

  ### üß† IAM Roles
  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: troutlyticsECSExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: ECSSecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: "*"

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: troutlyticsLambdaExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: LambdaSecretsAccess
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: secretsmanager:GetSecretValue
                Resource: "*"

  ### üì¶ Lambda API Function
  ApiLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: troutlytics-api
      Role: !GetAtt LambdaExecutionRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Ref ECRImageUriAPI
      Timeout: 30
      MemorySize: 512

  ApiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: troutlytics-api-gw
      ProtocolType: HTTP
      Target: !Ref ApiLambdaFunction

  ### üï∏Ô∏è Web Scraper Task
  ScraperTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: troutlytics-scraper-task
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      RequiresCompatibilities: [FARGATE]
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      ContainerDefinitions:
        - Name: troutlytics-scraper
          Image: !Ref ECRImageUriScraper
          Secrets:
            - Name: DB_URI
              ValueFrom: !Ref DBSecret
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/troutlytics
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ScraperRule:
    Type: AWS::Events::Rule
    Properties:
      Name: troutlytics-daily
      ScheduleExpression: rate(1 day)
      State: ENABLED
      Targets:
        - Arn: !GetAtt ScraperCluster.Arn
          Id: RunScraper
          RoleArn: !GetAtt ECSExecutionRole.Arn
          EcsParameters:
            TaskDefinitionArn: !Ref ScraperTaskDefinition
            LaunchType: FARGATE
            PlatformVersion: LATEST
            NetworkConfiguration:
              AwsVpcConfiguration:
                AssignPublicIp: ENABLED
                Subnets: !Ref SubnetIds
                SecurityGroups:
                  - !Ref SecurityGroupId

  ScraperCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: troutlytics-cluster

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/troutlytics
      RetentionInDays: 14
